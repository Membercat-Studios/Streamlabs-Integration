import xyz.jpenilla.resourcefactory.paper.PaperPluginYaml

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.0.0-SNAPSHOT'
    id 'xyz.jpenilla.resource-factory-paper-convention' version '1.2.1'
}

group = 'me.Domplanto'
version = '0.2.0'
description = 'A Minecraft plugin that allows Youtube/Twitch donations to trigger events in your Minecraft world using the Streamlabs API!'

java.sourceCompatibility = JavaVersion.VERSION_21
def runDir = "run/plugins"
def runFileName = "%s-testbuild.jar".formatted(name)

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://repo.extendedclip.com/releases/' }
    maven { url = 'https://repo.maven.apache.org/maven2' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.6")

    implementation("com.fathzer:javaluator:3.0.3")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("io.github.classgraph:classgraph:4.8.179")
    implementation("org.java-websocket:Java-WebSocket:1.5.4")
    implementation("org.jetbrains:annotations:24.1.0")
}

paperPluginYaml {
    main.set "me.Domplanto.streamLabs.StreamLabs"
    apiVersion.set "1.21.4"
    authors.addAll("Membercat Studios", "Domplanto", "codingcat")
    website.set "https://github.com/Membercat-Studios/Streamlabs-Integration/wiki"

    dependencies.server.register("PlaceholderAPI") {
        load.set PaperPluginYaml.Load.BEFORE
        required.set false
        joinClasspath.set true
    }
}

tasks.register('copyBuiltFileToRunDir') {
    def outputFileName = "%s-%s.jar".formatted(project.name, version)
    //noinspection GrDeprecatedAPIUsage
    def outputFile = file(project.buildDir.toPath().resolve("libs").resolve(outputFileName))
    println outputFileName
    println outputFile
    copy {
        from(outputFile)
        into(runDir)
        rename(outputFileName, runFileName)
    }
}

tasks.named("build") {
    dependsOn("shadowJar")
}

tasks.named("shadowJar") {
    archiveClassifier.set("")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}
